<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  ~ Copyright 2005-2011 WSO2, Inc. (http://wso2.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<wso2registry>

    <!--
    For details on configuring different config & governance registries see;
    http://wso2.org/library/tutorials/2010/04/sharing-registry-space-across-multiple-product-instances
    -->

    <currentDBConfig>wso2registry</currentDBConfig>
    <readOnly>false</readOnly>
    <enableCache>true</enableCache>
    <registryRoot>/</registryRoot>

    <dbConfig name="wso2registry">
        <dataSource>jdbc/WSO2CarbonDB</dataSource>
    </dbConfig>

	<!--aspect name="SecondLifeCycle" class="org.wso2.carbon.governance.registry.extensions.aspects.DefaultLifeCycle">
	    <configuration type="literal">
		<lifecycle>
		    <scxml xmlns="http://www.w3.org/2005/07/scxml"
		           version="1.0"
		           initialstate="Development">
		        <state id="Development">
		            <datamodel>
		                <data name="checkItems">
		                    <item name="Code Completed" forEvent="">
		                    </item>
		                    <item name="WSDL, Schema Created" forEvent="">
		                    </item>
		                    <item name="QoS Created" forEvent="">
		                    </item>
		                </data>
		            </datamodel>
		            <transition event="Promote" target="Tested"/>
		        </state>
		        <state id="Published">
		            <datamodel>
		                <data name="checkItems">
		                    <item name="Effective Inspection Completed" forEvent="">
		                    </item>
		                    <item name="Test Cases Passed" forEvent="">
		                    </item>
		                    <item name="Smoke Test Passed" forEvent="">
		                    </item>
		                </data>
		            </datamodel>
		            <transition event="Promote" target="Production"/>
		            <transition event="Demote" target="Development"/>
		        </state>
		        <state id="Deprecated">
		            <transition event="Demote" target="Tested"/>
		        </state>
		    </scxml>
		</lifecycle>
	    </configuration>
	</aspect-->
<aspect name="SampleLifeCycle2" class="org.wso2.jaggery.scxml.aspects.JaggeryTravellingPermissionLifeCycle">
    <configuration type="literal">
        <lifecycle>
            <scxml xmlns="http://www.w3.org/2005/07/scxml"
                   version="1.0"
                   initialstate="Created">
                <state id="Created">
                    <datamodel>
			<data name="transitionExecution">
				<execution forEvent="Promote" class="org.wso2.jaggery.scxml.generic.GenericExecutor">
					<parameter name="PERMISSION:get" value="http://www.wso2.org/projects/registry/actions/get" />
					<parameter name="PERMISSION:add" value="http://www.wso2.org/projects/registry/actions/add" />
					<parameter name="PERMISSION:delete" value="http://www.wso2.org/projects/registry/actions/delete" />
					<parameter name="PERMISSION:authorize" value="authorize"/>
					
					<parameter name="STATE_RULE1:In-Review" value="private_{asset_author}:+get,-add,-delete,-authorize" />
					<parameter name="STATE_RULE2:In-Review" value="reviewer:+get,+add,-delete,+authorize"/>
					<parameter name="STATE_RULE3:In-Review" value="everyone:-get,-add,-delete,-authorize" />	
				</execution> 
			</data>
                    </datamodel>
                    <transition event="Promote" target="In-Review"/>                  
                </state>
                <state id="In-Review">
                    <datamodel>
			<data name="transitionExecution">
				<execution forEvent="Promote" class="org.wso2.jaggery.scxml.generic.GenericExecutor">
					<parameter name="PERMISSION:get" value="http://www.wso2.org/projects/registry/actions/get" />
					<parameter name="PERMISSION:add" value="http://www.wso2.org/projects/registry/actions/add" />
					<parameter name="PERMISSION:delete" value="http://www.wso2.org/projects/registry/actions/delete" />
					<parameter name="PERMISSION:authorize" value="authorize"/>
					
					<parameter name="STATE_RULE1:Published" value="private_{asset_author}:+get,+add,-delete,+authorize" />
					<parameter name="STATE_RULE2:Published" value="reviewer:+get,-add,-delete,-authorize"/>	
					<parameter name="STATE_RULE3:Published" value="everyone:+get,-add,-delete,-authorize" />	
				</execution> 
			</data>			
                    </datamodel>
                    <transition event="Promote" target="Published"/>
                </state>
                <state id="Published">
		    <datamodel>
			<data name="transitionExecution">
				<execution forEvent="Demote" class="org.wso2.jaggery.scxml.generic.GenericExecutor">
					<parameter name="PERMISSION:get" value="http://www.wso2.org/projects/registry/actions/get" />
					<parameter name="PERMISSION:add" value="http://www.wso2.org/projects/registry/actions/add" />
					<parameter name="PERMISSION:delete" value="http://www.wso2.org/projects/registry/actions/delete" />
					<parameter name="PERMISSION:authorize" value="authorize"/>

					<parameter name="STATE_RULE1:Unpublished" value="private_{asset_author}:+get,+add,+delete,+authorize" />
					<parameter name="STATE_RULE2:Unpublished" value="reviewer:-get,-add,-delete,-authorize"/>
					<parameter name="STATE_RULE3:Unpublished" value="everyone:-get,-add,-delete,-authorize"/>							
				</execution> 
			</data>			
                    </datamodel>  
                    <transition event="Demote" target="Unpublished"/>
                </state>  
		<state id="Unpublished">
		    <datamodel>
			<data name="transitionExecution">
				<execution forEvent="Promote" class="org.wso2.jaggery.scxml.generic.GenericExecutor">
					<parameter name="PERMISSION:get" value="http://www.wso2.org/projects/registry/actions/get" />
					<parameter name="PERMISSION:add" value="http://www.wso2.org/projects/registry/actions/add" />
					<parameter name="PERMISSION:delete" value="http://www.wso2.org/projects/registry/actions/delete" />
					<parameter name="PERMISSION:authorize" value="authorize"/>
					
					<parameter name="STATE_RULE1:In-Review" value="private_{asset_author}:+get,-add,-delete,-authorize" />
					<parameter name="STATE_RULE2:In-Review" value="reviewer:+get,+add,-delete,+authorize"/>
					<parameter name="STATE_RULE3:In-Review" value="everyone:-get,-add,-delete,-authorize" />		
				</execution> 
			</data>			
                    </datamodel>
		    <transition event="Promote" target="In-Review"/>
		</state>             
            </scxml>
        </lifecycle>
    </configuration>
</aspect>

<handler class="org.wso2.jaggery.scxml.registry.handlers.JaggeryExecutorHandler" methods="PUT">
    <filter class="org.wso2.jaggery.scxml.registry.filters.JaggeryExecutorFilter">
    </filter>
</handler>

    <!--<aspect name="SampleLifeCycle" class="org.wso2.carbon.governance.registry.extensions.aspects.ChecklistLifeCycle">
        <configuration type="literal">
            <lifecycle>
                <state name="Created" id="Created" location="/environment/created">
                    <checkitem>Condition 1</checkitem>
                    <checkitem>Condition 2</checkitem>
                </state>
                <state name="Deprecated" id="Deprecated" location="/environment/deprecated">
                </state>
            </lifecycle>
        </configuration>
    </aspect>-->

    <!--<handler class="org.wso2.carbon.registry.extensions.handlers.SynapseRepositoryHandler">
         <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
             <property name="mediaType">application/vnd.apache.synapse</property>
         </filter>
     </handler>

     <handler class="org.wso2.carbon.registry.extensions.handlers.SynapseRepositoryHandler">
         <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
             <property name="mediaType">application/vnd.apache.esb</property>
         </filter>
     </handler>

     <handler class="org.wso2.carbon.registry.extensions.handlers.Axis2RepositoryHandler">
         <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
             <property name="mediaType">application/vnd.apache.axis2</property>
         </filter>
     </handler>

     <handler class="org.wso2.carbon.registry.extensions.handlers.Axis2RepositoryHandler">
         <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
             <property name="mediaType">application/vnd.apache.wsas</property>
         </filter>
     </handler>

     <handler class="org.wso2.carbon.registry.extensions.handlers.WSDLMediaTypeHandler">
         <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
             <property name="mediaType">application/wsdl+xml</property>
         </filter>
     </handler>

     <handler class="org.wso2.carbon.registry.extensions.handlers.XSDMediaTypeHandler">
         <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
             <property name="mediaType">application/x-xsd+xml</property>
         </filter>
     </handler> -->

    <!--remoteInstance url="https://localhost:9443/registry">
        <id>instanceid</id>
        <username>username</username>
        <password>password</password>
    </remoteInstance-->

    <!--remoteInstance url="https://localhost:9443/registry">
        <id>instanceid</id>
        <dbConfig>wso2registry</dbConfig>
        <readOnly>false</readOnly>
        <enableCache>true</enableCache>
        <registryRoot>/</registryRoot>
    </remoteInstance-->

    <!--mount path="/_system/config" overwrite="true|false|virtual">
        <instanceId>instanceid</instanceId>
        <targetPath>/_system/nodes</targetPath>
    </mount-->

    <!-- This defines index cofiguration which is used in meta data search feature of the registry -->
    <indexingConfiguration>
        <startingDelayInSeconds>300</startingDelayInSeconds>
        <indexingFrequencyInSeconds>60</indexingFrequencyInSeconds>
        <!-- location storing the time the indexing took place-->
        <lastAccessTimeLocation>/_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime</lastAccessTimeLocation>
        <!-- the indexers that implement the indexer interface for a relevant media type/(s) -->
        <indexers>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.MSExcelIndexer" mediaTypeRegEx="application/vnd.ms-excel"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.MSPowerpointIndexer" mediaTypeRegEx="application/vnd.ms-powerpoint"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.MSWordIndexer" mediaTypeRegEx="application/msword"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.PDFIndexer" mediaTypeRegEx="application/pdf"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/xml"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/(.)+\+xml"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="text/(.)+"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="application/x-javascript"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="application/json"/>
        </indexers>
        <exclusions>
            <exclusion pathRegEx="/_system/config/repository/dashboards/gadgets/swfobject1-5/.*[.]html"/>
            <exclusion pathRegEx="/_system/local/repository/components/org[.]wso2[.]carbon[.]registry/mount/.*"/>
        </exclusions>
    </indexingConfiguration>

    <versionResourcesOnChange>true</versionResourcesOnChange>

    <!-- NOTE: You can edit the options under "StaticConfiguration" only before the
     startup. -->
    <staticConfiguration>
        <versioningProperties>true</versioningProperties>
        <versioningComments>true</versioningComments>
        <versioningTags>true</versioningTags>
        <versioningRatings>true</versioningRatings>
    </staticConfiguration>
</wso2registry>
