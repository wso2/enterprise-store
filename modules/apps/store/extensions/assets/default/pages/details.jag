<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var caramel;
require('/modules/store.js').exec(function (ctx) {
    caramel = require('caramel');
    var rxt = require('rxt');
    var ratingApi = require('/modules/rating_api.js').api;

    var asset = rxt.asset;
    var ui = rxt.ui;
    var core = rxt.core;
    var user = ctx.user;

    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var log = ctx.log;
    var options = uriMatcher.match('/{context}/asts/{type}/{pageName}/{+id}') || uriMatcher.match('/{context}/asts/{type}/{pageName}');
    if (!options) {
        response.sendError(400, 'Could not locate an endpoint for your request.Make sure that you provide an id');
    } else if (!options.id) {
        response.sendError(400, 'An id must be provided when viewing details of a particular asset');
    } else {
        var type = options.type;
        var context = core.createAssetContext(ctx.session, type);
        var am;
        var username;
        if (user) {
            am = asset.createUserAssetManager(ctx.session, type);
        }
        else {
            am = asset.createAnonAssetManager(ctx.session, type, context.tenantId);
        }
        var page = ui.buildPage(ctx.session, ctx.request);
        var assets = null;

        //The asset retrieval may fail when attempting to obtain an asset which is not accessible
        try {
            assets = am.get(options.id);
            var assetsArray = [];
            assetsArray.push(assets);
            ratingApi.addRatings(assetsArray, am, context.tenantId, context.username);
            assets.isSubscribed = am.isSubscribed(options.id, ctx.session);
        }
        catch (e) {
            log.warn('Unable to retrieve asset with id: ' + options.id + ' due to ' + e);
        }

        if (assets == null) {
            response.sendError(404, 'The asset with id: ' + options.id + ' could not be located.');
        } else {
            var output = am.renderBasic(assets, page).details();
            //log.info(output);
            caramel.render(output);
            //print('Details');
        }
    }
}, request, response, session); %>