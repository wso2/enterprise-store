<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 Description: Invoke routed api endpoints
 Filename : assets.jag
 * can be extended by asset type

 ENDPOINTS:
 GET
 /apis/assets/
 /apis/assets/{id}
 /apis/assets/{id}/state

 POST
 /apis/assets/
 /apis/assets/{id}
 /apis/assets/{id}/state

 DELETE
 /apis/assets/{id}

 */

require('/modules/publisher.js').exec(function (ctx) {
    var log = new Log('asset_api_endpoints');
    var ref = require('utils').request;
    var responseProcessor = require('utils').response;
    var res = ctx.response;
    var req = ctx.request;
    var session = ctx.session;

    var uriMatcher = new URIMatcher(req.getRequestURI());

    var assetApi = require('/modules/asset_api.js').api;
    var lcApi = require('/modules/lifecycle_api.js').api;

    var CREATE_URL = '/{context}/apis/assets/';
    var UPDATE_URL = '/{context}/apis/assets/{id}';
    var LIST_ASSETS_URL = '/{context}/apis/assets/';
    var GET_ASSET_URL = '/{context}/apis/assets/{id}';
    var DELETE_ASSET_URL = '/{context}/apis/assets/{id}';
    var ASSET_STATE_URL = '/{context}/apis/assets/{id}/state';

    var method = req.getMethod();
    var options = ref.getQueryOptions(req.getQueryString());
    var response = ctx.response;
    response.contentType = 'application/json';

    var constants = require("rxt").constants;

    switch (method) {
        case 'POST':// POST endpoints
            var newAsset;
            if (uriMatcher.match(CREATE_URL)) {//to create asset
                try {
                    newAsset = assetApi.create(options, req, res, session);
                    //If the asset is successfully created then return the asset
                    if (newAsset) {
                        response = responseProcessor.buildSuccessResponse(res,
                                constants.STATUS_CODES.CREATED, newAsset)
                    } else {
                        response = responseProcessor.buildErrorResponse(res,
                                constants.STATUS_CODES.INTERNAL_SERVER_ERROR, 'Failed to create asset of type: ' +
                                        options.type);
                    }
                } catch (e) {
                    log.error(e);
                    response = responseProcessor.buildErrorResponse(res,
                            constants.STATUS_CODES.INTERNAL_SERVER_ERROR, 'Failed to create asset of type: ' +
                                    options.type);
                }

            } else if (uriMatcher.match(UPDATE_URL)) {//to update asset
                options.id = uriMatcher.elements().id;
                try {
                    asset = assetApi.update(options, req, res, session);
                    //if the asset is successfully updated
                    if (asset) {
                        response = responseProcessor.buildSuccessResponse(response,
                                constants.STATUS_CODES.OK, asset)
                    } else {
                        response = responseProcessor.buildErrorResponse(response,
                                constants.STATUS_CODES.INTERNAL_SERVER_ERROR, 'Unable to update the asset');
                    }
                } catch (e) {
                    if (e.hasOwnProperty('message') && e.hasOwnProperty('code')) {
                        log.error(e.message);
                        response = responseProcessor.buildErrorResponse(response, e.code, e.message);
                    } else {
                        log.error(e);
                        response = responseProcessor.buildErrorResponse(res,
                                constants.STATUS_CODES.INTERNAL_SERVER_ERROR, 'Failed to update asset of type: ' +
                                        options.type);
                    }
                }

            } else if (uriMatcher.match(ASSET_STATE_URL)) {//change asset's LC state
                var elements = uriMatcher.elements();
                options.id = elements.id;
                try {
                    var out = lcApi.invokeStateTransition(options, req, res, session);
                    response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, out);
                } catch (e) {
                    if (e.hasOwnProperty('message') && e.hasOwnProperty('code')) {
                        log.error(e.message);
                        response = responseProcessor.buildErrorResponse(response, e.code, e.message);
                    } else {
                        log.error(e);
                        response = responseProcessor.buildErrorResponse(res,
                                constants.STATUS_CODES.INTERNAL_SERVER_ERROR,
                                'Failed to change the lifecycle state of the asset : ' + options.id);
                    }
                }

            } else {
                response = responseProcessor.buildErrorResponse(response,
                        constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this POST endpoint');
            }
            break;

        case 'GET':// GET endpoints
            options.type = req.getParameter('type');
            if (uriMatcher.match(LIST_ASSETS_URL)) {//return assets by type
                var assets = assetApi.search(options, req, res, session);
                response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, assets);
            } else if (uriMatcher.match(GET_ASSET_URL)) {//return asset by id
                options.id = uriMatcher.elements().id;
                var asset = assetApi.get(options, req, res, session);
                if (asset) {
                    response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, asset);
                } else {
                    response = responseProcessor.buildErrorResponse(response,
                            constants.STATUS_CODES.NOT_FOUND, "No matching asset found by id : " + options.id);
                }
            } else if (uriMatcher.match(ASSET_STATE_URL)) {//return asset state by id
                try {
                    options.id = uriMatcher.elements().id;
                    var state = lcApi.getState(options, req, res, session);
                    response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, state);
                } catch (e) {
                    if (e.hasOwnProperty('message') && e.hasOwnProperty('code')) {
                        log.error(e.message);
                        response = responseProcessor.buildErrorResponse(response, e.code, e.message);
                    } else {
                        response = responseProcessor.buildErrorResponse(res,
                                constants.STATUS_CODES.INTERNAL_SERVER_ERROR,
                                'Failed to get lifecycle state details of the asset : '
                                        + options.id);
                    }
                }

            } else {
                response = responseProcessor.buildErrorResponse(response,
                        constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this GET endpoint');
            }
            break;

        case 'DELETE': // DELETE endpoints
            options.type = req.getParameter('type');
            if (uriMatcher.match(DELETE_ASSET_URL)) {
                try {
                    options.id = uriMatcher.elements().id;
                    var done = assetApi.remove(options, req, res, session);
                    if (done) {
                        response = responseProcessor.buildSuccessResponse(response,
                                constants.STATUS_CODES.OK, "Asset Deleted Successfully");
                    } else {
                        response = responseProcessor.buildErrorResponse(response,
                                constants.STATUS_CODES.INTERNAL_SERVER_ERROR, "Unable to Delete Asset of id:" +
                                        options.id);
                    }
                } catch (e) {
                    log.error(e);
                    response = responseProcessor.buildErrorResponse(response,
                            constants.STATUS_CODES.INTERNAL_SERVER_ERROR, "An error occurred while deleting asset");
                }
            } else {
                response = responseProcessor.buildErrorResponse(response,
                        constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this DELETE endpoint');
            }
            break;

        default://other un-implemented endpoints
            response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED,
                    'The endpoint that you have requested is not implemented for the ' + method +
                            ' method.Try making the request with the appropriate verb' +
                            '(hint: create/update operations use POST).');
    }
}, request, response, session); %>
