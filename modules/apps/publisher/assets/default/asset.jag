<%
	//print('<br/> Default asset file <br/>');

/*
	Description: Provides CRUD support for assets
	Note: type: shortName in the Rxt templates
		GET  api/asset/{type} 	       	  : Provides the Rxt template 
		GET  api/asset/{type}/{id}        : Provides artifact details on the provided type
		POST api/asset/{type}             : Creates a new asset of the given type
		PUT  api/asset/{type}/{id}	  : Updates an asset with the given type and id
		DELETE asset/{type}/{id} 	  : Deletes an asset with the provided type and id
	Filename:asset.js
	Created Date: 29/7/2013
*/


var config=require('/config/publisher.json');
var caramel=require('caramel');

var router=require('/modules/router-g.js').router();
var routeManager=new router.Router(); 

//var routeManager=application.get(config.app.ROUTE_MANAGER);
var rxtManager=application.get(config.app.RXT_MANAGER);

routeManager.register('GET','publisher','/publisher/asset/{type}',function(context){

	var shortName=(context.params.type)||'';
	var operation='create';
	var rxtTemplate=rxtManager.findAssetTemplate(function(template){
		return (template.shortName==shortName)?true:false;		
	});

	if(!rxtTemplate){
		response.sendError(404,'Asset type not found'); //TODO: Replace
	}
	else{	
		//print(rxtTemplate);
		var artifact=createEmptyArtifact(rxtTemplate);
		var model=reverseModel(artifact);
		
		//print(artifact);
		//print(model);
		caramel.render({op:operation,shortName:shortName,artifact:artifact,rxtTemplate:rxtTemplate,data:model});
	}

	//context.renderer.success({sample:{name:'asset form2'}});
});

/*
Creates an empty artifact instance from an rxtTemplate
TODO: Need to improve
*/
function createEmptyArtifact(rxtTemplate){
	var artifact={
		id:'',
		attributes:{
		}
	};

	//Go through all of the tables in the template
	for each(var table in rxtTemplate.contentBlock.tables){
	
		var tableName=table.name.toLowerCase();


		//Go through all of the fields in the table
		for each(var field in table.getFields()){
			var fieldName=field.name.name.toLowerCase();

			artifact.attributes[tableName+'_'+fieldName]='';
		}
	}

	return artifact;
}

routeManager.register('GET','publisher','/publisher/asset/{type}/{id}',function(context){
	
	var shortName=context.params.type;
	//print(context.params);
	var id=context.params.id;
	var operation='view';
	var artifactManager=rxtManager.getArtifactManager(shortName);

	//If the id is not found it will throw a conversion exception
	//TODO: Return an empty artifact or null
	try{

		var artifact=artifactManager.get(id);

		//Get the template
		var rxtTemplate=rxtManager.findAssetTemplate(function(template){
			return (template.shortName==shortName)?true:false;		
		});

		//print(artifact);

		var model=reverseModel(artifact);
//		print(model);
		caramel.render({op:operation,shortName:shortName,artifact:artifact,rxtTemplate:rxtTemplate,data:model});
	}catch(e){
		response.sendError(404,'Asset with id '+id+' could not be found'+e);
	}
	
});

/*
Converts artifacts attributes object into an array to allow traversal
using Handlebars each  helper
TODO: Find a better way! and change the name
*/
function reverseModel(artifact){
	var model={
		attributes:[]
	}
	var attributeArray=artifact.attributes;
	//Go through each attribute 
	for(var attr in attributeArray){
		//print(attr);

		
		model.attributes.push({
			name: attr,
			value:attributeArray[attr]
		});

	}

	return model;
}

routeManager.register('POST','publisher','/publisher/asset/{type}',function(context){
	var shortName=context.params.type;
	var artifactManager=rxtManager.getArtifactManager(shortName);

	//Check if the type is valid
	try{
		var assetModel=getModel(context.post);
		//print(context.post);

		//print(assetModel);
		//log.info(assetModel);
		var createdAsset=artifactManager.add(assetModel);
		//print(createdAsset);
	}
	catch(e){
		response.sendError(500,'Could not create asset');
	}
	
});
/*
The function converts the post parameters to a model
that can be passed to the artifact manager
*/
function getModel(data){
	var model={ 
		name:'',
		attributes:{}
	};

	for(var key in data){
		model.attributes[key]=data[key];

		//Check if key is name and set the name of the
		//model
		if(key=='overview_name'){
			model.name=data[key];
		}		
	}

	//print(model);
	return model;
}


routeManager.register('PUT','publisher','/publisher/asset/{type}/{id}/{attr}/{value}',function(context){
	/*var shortName=context.params.type;
	var id=context.params.id;
	var attribute=context.params.attr;
	var attributeValue=context.params.value;
	var artifactManager=rxtManager.getArtifactManager(shortName);

	//Obtain the artifact
	try{
		var result=artifactManager.update({
					id:id,
					attributes: {
						attribute:attributeValue,
						overview_type:'default'
					}
				});	
		print(result);
		
	}catch(e){
		print('unable to update artifact with id'+e);
	}*/
});

routeManager.register('DELETE','publisher','/publisher/asset/{type}/{id}',function(context){
	var shortName=context.params.type;
	var id=context.params.id;

	var artifactManager=rxtManager.getArtifactManager(shortName);

	try{
		artifactManager.remove(id);
		print('artifact with id removed');
	}catch(e){
		response.sendError(404,'Asset with id: '+shortName+' removed.');
	}

	
});

routeManager.handle(request,response);

%>
